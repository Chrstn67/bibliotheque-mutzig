import { UserConfig, ResolvedConfig, Plugin } from 'vite';
import { ViteVercelConfig, ViteVercelPrerenderFn, ViteVercelApiEntry } from 'vite-plugin-vercel';

declare module "vite" {
    interface UserConfig {
        vercel?: ViteVercelConfig;
    }
}
declare function assert(condition: unknown, errorMessage: string): asserts condition;
declare function getRoot(config: UserConfig | ResolvedConfig): string;
declare function getOutput(config: ResolvedConfig, suffix?: "functions" | `functions/${string}.func` | "static"): string;
declare function getOutDir(config: ResolvedConfig, force?: "client" | "server"): string;
declare const prerender: ViteVercelPrerenderFn;
declare function getSsrEdgeEndpoint(): Promise<ViteVercelApiEntry["source"]>;
declare function getSsrEndpoint(source?: string): Promise<{
    source: {
        contents: string;
        sourcefile: string;
        loader: "default" | "js" | "jsx" | "ts" | "tsx";
        resolveDir: string;
    };
    destination: string;
    route: false;
}>;
interface Options {
    /**
     * A pattern that matches each incoming pathname that should be caught by vike.
     * As this rule is inserted last, a simple catch-all rule excluding /api/* should be enough.
     * Defaults to `(?!/api).*`
     * @see {@link https://vercel.com/docs/project-configuration#project-configuration/rewrites}
     */
    source?: string;
}
declare function vikeVercelPlugin(options?: Options): Plugin;
declare function vitePluginVercelVikeConfigPlugin(): Plugin;
declare function vitePluginVercelVikeCopyStaticAssetsPlugins(): Plugin;
declare function allPlugins(options?: Options): Plugin[];

export { type Options, assert, allPlugins as default, getOutDir, getOutput, getRoot, getSsrEdgeEndpoint, getSsrEndpoint, prerender, vikeVercelPlugin, vitePluginVercelVikeConfigPlugin, vitePluginVercelVikeCopyStaticAssetsPlugins };
