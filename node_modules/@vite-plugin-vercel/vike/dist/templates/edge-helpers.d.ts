import * as stream_web from 'stream/web';
import { renderPage } from 'vike';

type HttpResponse = NonNullable<Awaited<ReturnType<typeof renderPage>>["httpResponse"]>;
/**
 * Extract useful pageContext from request to give to renderPage(...).
 * It handles internals such as retrieving the original url from `x-now-route-matches` header or from `__original_path` query,
 * so it's highly recommended to use it instead of `request.url`.
 * @param request
 */
declare function getDefaultPageContextInit(request: Request): {
    urlOriginal: string;
    body: stream_web.ReadableStream<any> | null;
    cookies: Record<string, string>;
};
/**
 * Send a default empty HTML response
 */
declare function getDefaultEmptyResponseHandler(): Response;
/**
 * Send `httpResponse` through `response`
 */
declare function getDefaultResponseHandler(httpResponse: HttpResponse): Response;

export { getDefaultEmptyResponseHandler, getDefaultPageContextInit, getDefaultResponseHandler };
