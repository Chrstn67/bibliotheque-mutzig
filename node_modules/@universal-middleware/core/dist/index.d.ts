import { IncomingMessage, ServerResponse, OutgoingHttpHeaders } from 'node:http';
import * as bun from 'bun';
import { Server } from 'bun';
import * as http from 'http';

type Awaitable<T> = T | Promise<T>;
interface CloudflareWorkerdRuntime<Env extends Record<string, any> = Record<string, unknown>> {
    runtime: "workerd";
    /**
     * @see {@link https://developers.cloudflare.com/workers/runtime-apis/bindings/}
     */
    env?: Env;
    /**
     * @see {@link https://developers.cloudflare.com/workers/runtime-apis/context/}
     */
    ctx?: {
        /**
         * @see {@link https://developers.cloudflare.com/workers/runtime-apis/context/#waituntil}
         */
        waitUntil?: (promise: Promise<any>) => void;
        /**
         * @see {@link https://developers.cloudflare.com/workers/runtime-apis/context/#passthroughonexception}
         */
        passThroughOnException?: () => void;
    };
}
interface DenoRuntime {
    runtime: "deno";
}
interface NodeRuntime {
    runtime: "node";
}
interface BunRuntime {
    runtime: "bun";
    server: Server;
}
interface VercelEdgeRuntime {
    runtime: "edge-light";
}
interface FastlyRuntime {
    runtime: "fastly";
}
interface OtherRuntime {
    runtime: "other";
}
/**
 * Inspired by Runtime Keys proposal
 * @see {@link https://runtime-keys.proposal.wintercg.org/}
 */
type Runtime = CloudflareWorkerdRuntime | DenoRuntime | NodeRuntime | BunRuntime | VercelEdgeRuntime | FastlyRuntime | OtherRuntime;
interface NodeAdapter {
    adapter: "node";
    params: undefined;
    req: IncomingMessage;
    res: ServerResponse;
}
interface ExpressAdapter {
    adapter: "express";
    params: Record<string, string> | undefined;
    req: IncomingMessage;
    res: ServerResponse;
}
interface FastifyAdapter {
    adapter: "fastify";
    params: Record<string, string> | undefined;
    req: IncomingMessage;
    res: ServerResponse;
}
interface HonoAdapter {
    adapter: "hono";
    params: Record<string, string> | undefined;
}
interface HattipAdapter {
    adapter: "hattip";
    params: Record<string, string> | undefined;
}
interface H3Adapter {
    adapter: "h3";
    params: Record<string, string> | undefined;
}
interface CloudflarePagesAdapter {
    adapter: "cloudflare-pages";
    params: Record<string, string> | undefined;
}
interface CloudflareWorkerAdapter {
    adapter: "cloudflare-worker";
    params: undefined;
}
interface ElysiaAdapter {
    adapter: "elysia";
    params: Record<string, string> | undefined;
}
interface WebrouteAdapter {
    adapter: "webroute";
    params: Record<string, string> | undefined;
}
interface OtherAdapter {
    adapter: "other";
    params: undefined;
}
type Adapter = NodeAdapter | ExpressAdapter | FastifyAdapter | HonoAdapter | HattipAdapter | H3Adapter | CloudflarePagesAdapter | CloudflareWorkerAdapter | ElysiaAdapter | WebrouteAdapter | OtherAdapter;
type RuntimeAdapter = Runtime & Adapter;
type UniversalMiddleware<InContext extends Universal.Context = Universal.Context, OutContext extends Universal.Context = Universal.Context> = (request: Request, context: InContext, runtime: RuntimeAdapter) => Awaitable<Response | OutContext | ((response: Response) => Awaitable<Response>) | void | undefined>;
type UniversalHandler<InContext extends Universal.Context = Universal.Context> = (request: Request, context: InContext, runtime: RuntimeAdapter) => Awaitable<Response>;
type Get<T extends unknown[], U> = (...args: T) => U;

declare function getAdapterRuntime<K extends Adapter["adapter"]>(adapter: K, adapterArgs: Omit<Extract<Adapter, {
    adapter: K;
}>, "adapter">, runtimeArgs?: Omit<Runtime, "runtime">): {
    adapter: "node";
    params: undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "deno";
} | {
    adapter: "express";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "deno";
} | {
    adapter: "fastify";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "deno";
} | {
    adapter: "hono";
    params: Record<string, string> | undefined;
    runtime: "deno";
} | {
    adapter: "hattip";
    params: Record<string, string> | undefined;
    runtime: "deno";
} | {
    adapter: "h3";
    params: Record<string, string> | undefined;
    runtime: "deno";
} | {
    adapter: "cloudflare-pages";
    params: Record<string, string> | undefined;
    runtime: "deno";
} | {
    adapter: "cloudflare-worker";
    params: undefined;
    runtime: "deno";
} | {
    adapter: "elysia";
    params: Record<string, string> | undefined;
    runtime: "deno";
} | {
    adapter: "webroute";
    params: Record<string, string> | undefined;
    runtime: "deno";
} | {
    adapter: "other";
    params: undefined;
    runtime: "deno";
} | {
    adapter: "node";
    params: undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "node";
} | {
    adapter: "express";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "node";
} | {
    adapter: "fastify";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "node";
} | {
    adapter: "hono";
    params: Record<string, string> | undefined;
    runtime: "node";
} | {
    adapter: "hattip";
    params: Record<string, string> | undefined;
    runtime: "node";
} | {
    adapter: "h3";
    params: Record<string, string> | undefined;
    runtime: "node";
} | {
    adapter: "cloudflare-pages";
    params: Record<string, string> | undefined;
    runtime: "node";
} | {
    adapter: "cloudflare-worker";
    params: undefined;
    runtime: "node";
} | {
    adapter: "elysia";
    params: Record<string, string> | undefined;
    runtime: "node";
} | {
    adapter: "webroute";
    params: Record<string, string> | undefined;
    runtime: "node";
} | {
    adapter: "other";
    params: undefined;
    runtime: "node";
} | {
    adapter: "node";
    params: undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "express";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "fastify";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "hono";
    params: Record<string, string> | undefined;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "hattip";
    params: Record<string, string> | undefined;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "h3";
    params: Record<string, string> | undefined;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "cloudflare-pages";
    params: Record<string, string> | undefined;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "cloudflare-worker";
    params: undefined;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "elysia";
    params: Record<string, string> | undefined;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "webroute";
    params: Record<string, string> | undefined;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "other";
    params: undefined;
    runtime: "bun";
    server: bun.Server;
} | {
    adapter: "node";
    params: undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "edge-light";
} | {
    adapter: "express";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "edge-light";
} | {
    adapter: "fastify";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "edge-light";
} | {
    adapter: "hono";
    params: Record<string, string> | undefined;
    runtime: "edge-light";
} | {
    adapter: "hattip";
    params: Record<string, string> | undefined;
    runtime: "edge-light";
} | {
    adapter: "h3";
    params: Record<string, string> | undefined;
    runtime: "edge-light";
} | {
    adapter: "cloudflare-pages";
    params: Record<string, string> | undefined;
    runtime: "edge-light";
} | {
    adapter: "cloudflare-worker";
    params: undefined;
    runtime: "edge-light";
} | {
    adapter: "elysia";
    params: Record<string, string> | undefined;
    runtime: "edge-light";
} | {
    adapter: "webroute";
    params: Record<string, string> | undefined;
    runtime: "edge-light";
} | {
    adapter: "other";
    params: undefined;
    runtime: "edge-light";
} | {
    adapter: "node";
    params: undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "fastly";
} | {
    adapter: "express";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "fastly";
} | {
    adapter: "fastify";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "fastly";
} | {
    adapter: "hono";
    params: Record<string, string> | undefined;
    runtime: "fastly";
} | {
    adapter: "hattip";
    params: Record<string, string> | undefined;
    runtime: "fastly";
} | {
    adapter: "h3";
    params: Record<string, string> | undefined;
    runtime: "fastly";
} | {
    adapter: "cloudflare-pages";
    params: Record<string, string> | undefined;
    runtime: "fastly";
} | {
    adapter: "cloudflare-worker";
    params: undefined;
    runtime: "fastly";
} | {
    adapter: "elysia";
    params: Record<string, string> | undefined;
    runtime: "fastly";
} | {
    adapter: "webroute";
    params: Record<string, string> | undefined;
    runtime: "fastly";
} | {
    adapter: "other";
    params: undefined;
    runtime: "fastly";
} | {
    adapter: "node";
    params: undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "other";
} | {
    adapter: "express";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "other";
} | {
    adapter: "fastify";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "other";
} | {
    adapter: "hono";
    params: Record<string, string> | undefined;
    runtime: "other";
} | {
    adapter: "hattip";
    params: Record<string, string> | undefined;
    runtime: "other";
} | {
    adapter: "h3";
    params: Record<string, string> | undefined;
    runtime: "other";
} | {
    adapter: "cloudflare-pages";
    params: Record<string, string> | undefined;
    runtime: "other";
} | {
    adapter: "cloudflare-worker";
    params: undefined;
    runtime: "other";
} | {
    adapter: "elysia";
    params: Record<string, string> | undefined;
    runtime: "other";
} | {
    adapter: "webroute";
    params: Record<string, string> | undefined;
    runtime: "other";
} | {
    adapter: "other";
    params: undefined;
    runtime: "other";
} | {
    adapter: "node";
    params: undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
} | {
    adapter: "express";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
} | {
    adapter: "fastify";
    params: Record<string, string> | undefined;
    req: http.IncomingMessage;
    res: http.ServerResponse;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
} | {
    adapter: "hono";
    params: Record<string, string> | undefined;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
} | {
    adapter: "hattip";
    params: Record<string, string> | undefined;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
} | {
    adapter: "h3";
    params: Record<string, string> | undefined;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
} | {
    adapter: "cloudflare-pages";
    params: Record<string, string> | undefined;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
} | {
    adapter: "cloudflare-worker";
    params: undefined;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
} | {
    adapter: "elysia";
    params: Record<string, string> | undefined;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
} | {
    adapter: "webroute";
    params: Record<string, string> | undefined;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
} | {
    adapter: "other";
    params: undefined;
    runtime: "workerd";
    env?: Record<string, unknown> | undefined;
    ctx?: {
        waitUntil?: (promise: Promise<any>) => void;
        passThroughOnException?: () => void;
    };
};

declare function isBodyInit(value: unknown): value is BodyInit;
declare function mergeHeadersInto(first: Headers, ...sources: Headers[]): Headers;
declare function nodeHeadersToWeb(nodeHeaders: OutgoingHttpHeaders): Headers;

type Out<T> = T extends UniversalMiddleware<any, infer C> ? C : never;
type In<T> = T extends UniversalHandler<infer C> ? C : T extends UniversalMiddleware<infer C, any> ? C : never;
type First<T extends any[]> = T extends [infer X, ...any[]] ? X : never;
type Last<T extends any[]> = T extends [...any[], infer X] ? X : never;
type ComposeReturnType<T extends UniversalMiddleware<any, any>[]> = Last<T> extends UniversalHandler<any> ? UniversalHandler<In<First<T>>> : UniversalMiddleware<In<First<T>>, In<Last<T>>>;
type Pipe<F extends UniversalMiddleware<any, any>[]> = F extends [] ? F : F extends [UniversalMiddleware<any, any>] ? F : F extends [UniversalMiddleware<infer A, infer B>, UniversalMiddleware<any, infer D>] ? [UniversalMiddleware<A, B>, UniversalMiddleware<B, D>] : F extends [
    ...infer X extends UniversalMiddleware<any, any>[],
    infer Y extends UniversalMiddleware<any, any>,
    UniversalMiddleware<any, infer D1>
] ? [...Pipe<[...X, Y]>, UniversalMiddleware<Out<Y>, D1>] : never;
declare function pipe<F extends UniversalMiddleware<any, any>[]>(...a: Pipe<F> extends F ? F : Pipe<F>): ComposeReturnType<F>;

/**
 * Retrieve path parameters from URL patterns.
 * For servers supporting URL patterns like '/user/:name', the parameters will be available under runtime.params.
 * For other adapters, the `path` argument must be present. Then parameters are extracted thanks to `regexparam`.
 *
 * If you are writing a Universal Handler or Middleware and need access to path parameters, we suggest to follow
 * this next example.
 *
 * @example
 * import { params, type Get, type UniversalHandler } from "@universal-middleware/core";
 *
 * interface Options {
 *   route?: string;
 * }
 *
 * const myMiddleware = ((options?: Options) => (request, ctx, runtime) => {
 *   const myParams = params(request, runtime, options?.route);
 *
 *   if (myParams === null) {
 *     // Provide a useful Error message to the user
 *     throw new Error("A path parameter named `:name` is required. " +
 *                     "You can set your server route as `/user/:name`, or use the `route` option of this middleware " +
 *                     "to achieve the same purpose.");
 *   }
 *
 *   // ...
 * }) satisfies Get<[Options | undefined], UniversalHandler>;
 *
 * export default myMiddleware;
 */
declare function params(request: Request, runtime: RuntimeAdapter, path: string | undefined): null | Record<string, string>;

declare function env<T extends Record<string, unknown>>(runtime: RuntimeAdapter): T;

declare global {
    namespace Universal {
        interface Context extends Record<string | number | symbol, unknown> {
        }
    }
}

export { type Adapter, type Awaitable, type BunRuntime, type CloudflarePagesAdapter, type CloudflareWorkerAdapter, type CloudflareWorkerdRuntime, type DenoRuntime, type ElysiaAdapter, type ExpressAdapter, type FastifyAdapter, type FastlyRuntime, type Get, type H3Adapter, type HattipAdapter, type HonoAdapter, type NodeAdapter, type NodeRuntime, type OtherAdapter, type OtherRuntime, type Runtime, type RuntimeAdapter, type UniversalHandler, type UniversalMiddleware, type VercelEdgeRuntime, type WebrouteAdapter, env, getAdapterRuntime, isBodyInit, mergeHeadersInto, nodeHeadersToWeb, params, pipe };
